---
layout:     post
title:      "亿级流量网站构架核心技术-读书笔记"
date:       2018-06-25 00:30
author:     "ZhouJ000"
header-img: "img/in-post/2018/post-bg-2018-headbg.jpg"
catalog: true
tags:
    - 架构
    - 读书笔记
--- 

<font id="last-updated">最后更新于：2018-06-30</font>


# 交易型系统设计的一些原则

## 高并发原则

+ 无状态
+ 拆分
	- 系统维度：根据系统功能/业务进行拆分
	- 功能维度：对一个系统进行功能再拆分
	- 读写维度：根据读写比例进行拆分
	- AOP维度：根据访问特征
	- 模块维度：比如按照基础或代码维护特征进行拆分
+ 服务化： 进程内服务 -> 单机远程服务 -> 集群手动注册服务 -> 自动注册和发现服务 -> 服务的分组/隔离/路由 -> 服务治理(限流/黑白名单等)
+ 消息队列：服务解耦、异步处理、流量削峰/缓冲等
	- 消息队列进行多个镜像复制
	- 重试功能、防重、(幂等性)
	- 失败处理、日志、报警
	- 大流量缓冲：一般是牺牲强一致性，而保证最终一致性
	- 数据校对：数据校对与修正来保证数据的一致性和完整性
+ 数据异构：形成数据闭环，任何依赖系统出问题了，还是能正常工作，只是更新会有积压，但不影响前端展示
	- 数据异构： 通过如MQ接受数据变更，然后原子化存储到合适的存储引擎，如Redis等。目的是把数据从多个数据源拿过来
	- 数据聚合： 可选的，目的是把这些数据做聚合，前端可以一个调用拿到全部数据，该步骤一般存储在KV存储中
	- 前端展示： 前端通过一次或少量调用拿到所需要的数据
+ 缓存银弹
	- 客户端： 
		+ 使用浏览器缓存： 设置请求过期时间，对应相应头Expires, Cache-control进行控制，适合于实时性不敏感数据
		+ 客户端应用缓存： 提前将内容发到客户端进行缓存
	- 客户端网络： 代理服务器开启缓存
	- 广域网： 
		+ 使用代理服务器(含CDN)： 一般有两种机制：推送机制(当内容变更后主动推送到CDN边缘节点)，拉取机制(先访问边缘节点，当没有内容时，回源到源服务器拿到内容并存储到节点上)。使用CDN需要考虑URL的设计，比如不能有随机数，否则每次都穿透CDN回源到源服务器；对于爬虫，可以返回过期数据而不选择回源
		+ 使用镜像服务器，使用P2P技术
	- 源站及源站网络：
		+ 使用接入层提供的缓存机制： 对于没CDN缓存的应用来说，可以考虑使用如Nginx搭建一层接入层，可以考虑以下机制：
			- URL重写：将URL按照指定的顺序或格式重写，去除随机数
			- 一致性哈希： 按照指定的参数做一致性哈希，从而保证相同数据落到一台服务器上
			- proxy_cache：使用内存级/SSD级代理缓存来缓存内容
			- proxy_cache_lock： 使用Lock机制，将多个回源合并为一个，以减少回源量，并设置相应的Lock超时时间
			- shared_dict： 如果架构使用nginx+lux实现，，可考虑使用Lua shared_dict进行cache，最大好处是reload缓存不会丢失
			- 对于托底(或兜底，指降级后显示的)数据或异常数据，不应该让其缓存，否则用户会很长一段时间内看到这些数据
		+ 使用应用层提供的缓存机制：使用Tomcat时可以使用堆内缓存/堆外缓存；local redis cache在应用所在服务器上部署一组redis，应用直接读取本机Redis数据，多机之间使用主从机制同步数据
		+ 使用分布式缓存：数据量太大，使用分片机制将流量分散到多台，或直接使用分布式缓存实现。常见分片机制是一致性哈希
		+ 静态化/伪静态化，使用服务器操作系统提供的缓存机制
+ 并发化
	
## 高可用原则

+ 降级
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	