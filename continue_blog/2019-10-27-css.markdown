---
layout:     post
title:      "css"
date:       2019-10-12
author:     "ZhouJ000"
header-img: "img/in-post/2019/post-bg-2019-headbg.jpg"
catalog: true
tags:
    - css
--- 



# CSS

CSS成为层叠样式表，它主要用于设置HTML页面中各个元素的样式，还可以针对不同的浏览器设置不同的样式

+ 缺省样式：浏览器样式
	- 所有的标签在不同的浏览器中都有各自默认的样式，可以通过设置修改浏览器的样式
+ 内嵌样式：style属性
	- `<p style="color:red">This is tag of paragraph</p>`
+ 内嵌样式：head标签中添加style标签
	- `<style type="text/css"> p {color:green;} </style>`
+ 外部样式：外联样式link
	- <link rel="stylesheet" href="css/page.css">
	- 推荐方式
+ 导入样式：@import
	- `<style type="text/css"> @import url(css/main.css); ... </style>`
	- 不推荐方式，会导致css不能并行下载，并且要求导入样式的书写必须在所有的css规则书写之前

CSS具有层叠性和继承性：  
1、层叠性：当多种css样式的叠加时，比如使用内嵌css样式表定义p标记字号大小为12像素，外部样式定义p标记颜色为红色，那么段落文本将显示为12像素红色，即这两种样式产生了叠加  
2、继承性：即子标记会继承父标记的某些样式，恰当地使用继承可以简化代码，注意的是并非所有CSS属性都被继承，比如所有盒子(边距、外边距、定位、宽高等)相关的属性都不能继承。在嵌套结构中，继承样式权重为0，即子元素定义的样式会覆盖继承来的样式

当同一个HTML元素被不止一个样式定义时，一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，优先权从低到高为(权重相同则就近原则，即靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最高，所有都相同时，声明靠后的优先级最大)：  
1、浏览器缺省设置  
2、外部样式表(推荐方式)  
3、内部样式表(位于head标签内部&导入)，即页内样式  
4、内联样式(位于HTML元素内部)，即行内样式  
5、!important命令最大优先级，该命令被赋予最大的优先级


## 选择器

![yufa1](yufa1.png)

选择器：  
+ 所有标签选择器：*{}
	- 使用"*"号表示，是所有选择器中作用范围最广的，能匹配页面中所有的元素
	- 通配符的穿透力很强，其优先级高于继承的样式，会覆盖继承的样式(属性)，一般情况下都不会使用
+ 标签(标记)选择器：p{}、div{}
	- 选择某一类的标签，比如div
+ ID选择器：#head{}
	- 选择符是"#"，id只允许出现字母(只能以字母开头)、下划线、数字，不允许出现标签名
	- ID选择器的优先级非常高，所以确定在整个页面内唯一出现时使用，否则因为优先级问题在后续维护中不能很好进行修改和更新
+ 类(class)循着器：.head{}
	- 对HTML标签中class属性进行选择，选择符是"."
	- 相同的class属性值，可以在HTML中出现多次，ID属性值在页面中则只能出现一次
	- 一个class的属性可以有多个值，也就是说一个标签可以有多个类
+ 复合选择器：是由两个或多个基础选择器，通过不同的方式组合而成的
	- 标签指定式选择器：第一个为标记(标签)选择器，第二个为class选择器或id选择器，两个选择器之间不能有空格，例如h3.special、p#one等
	- 后代选择器：用来选择元素或元素组的后代，把外层标记写在前面，内层标记写在后面，中间用空格分隔。当标记发生嵌套时，内层标记就称为外层标记的后代，例如.class h3
	- 并集选择器：各个选择器通过逗号连接而成的，任何形式的选择器都可以作为并集选择器的一部分，例如.class,h3
	- 子元素选择器：让css选择器只能选择儿子辈的元素，例如：h1>strong，意为选择作为h1元素子元素的所有strong元素，>与两边选择器之间的空格可有可无
+ 属性选择器	
	- 简单属性选择器：例如h1[class]{k:v;}，表示选择所有拥有class属性的h1标签，也可以使用多个属性选择，例如h1[class][id]{..}
	- 根据属性值选择：例如h1[id="a"]{..}，表示获取属性名id为a的h1标签
	- 属性名全包含：例如h1[class~="a"]{..}，表示只要包含属性就被选择，和第一种差不多
	- 属性模糊选择：例如h1[attr^="val"]{..}、h1[attr$="val"]{..}，表示具有attr属性并且以val开头(结尾)的h1标签
	- 属性模糊匹配包含：例如h1[attr*="val"]，表示㕛attr属性且属性值包含val字符串的h1标签
+ 伪类与伪元素选择器
	- 状态是动态变化的，当一个元素到达一个特定状态时，它可能得到一个样式，当状态改变时，又失去这个样式。它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类
	- CSS伪类
		+ :link，该伪类将应用于未被访问过的链接，IE6不兼容。一般不用此伪类，直接使用a标签
		+ :hover，该伪类将应用于有鼠标指针悬停于其上的元素，在IE6只能应用于a标签，IE7+所有元素都兼容
		+ :active，该伪类将应用于被激活的元素，例如被点击的链接、被按下的按钮登等
		+ :visited，该伪类将应用于已经被访问过的链接
		+ :focus，该伪类将应用于拥有键盘输入焦点的元素
	- 伪元素
		+ :first-line与:first-letter，这两个伪元素只能用于块级元素。前者用于选择第一行，后者用于选择第一个字符
		+ :first-child伪元素选择属于第一个子元素的元素
		+ :before与:after伪元素则可以设置元素之前和之后的内容，并且配合content设置相关内容
	- 例子：p.artcle:first-line{...}、span:first-child{...}、#demo:after,#demo:before{...}
	

	================================= ？？？？？？？？？？
+ 层级选择器
+ 分组选择器
+ 相邻兄弟选择器
	================================= ？？？？？？？？？？


定义css样式时，经常出现两个或多个规则应用在同一元素上，这时就会出现优先级的问题:  
1、内联样式最大，即内联样式的优先级最高  
2、ID选择器优先级仅次于内联样式  
3、类选择器优先级次于ID选择器  
4、标签选择器最低  


## 常用属性

Display属性：display属性可以控制标签的显示模式，它有四个可选值：  
1、none代表此元素不被显示，在文档中被删除  
2、block代表按块级元素显示，前后带换行符，自己占一行  
3、inline代表按内联元素显示，一个挨着一个  
4、inline-block代表按行内标签进行排版，但是可以设置宽高，而且高度可以影响行高

文字排版：  
1、单位之间的关系：1in = 2.54cm = 25.4mm = 96px，1em等于当前的字体大小，例如当前元素的字体大小为16px，那么1em = 16px  
2、font-size：字号大小，可以使用相对长度单位，也可以使用绝对长度单位，推荐使用像素单位px  
3、font-family：用于设置字体，可以同时指定多个字体，中间以逗号隔开，浏览器会依次找到支持的第一个字体  
4、font-weight：字体粗细  
5、font-style: 字体风格  
6、letter-spacing：定义字间距，就是字符与字符之间的空白  
7、word-spacing：定义英文单词之间的间距，对中文字符无效  
8、line-height：设置行间距，即字符的垂直间距，一般称为行高  
9、text-indent：设置段落首行文本的锁紧，只能设置块级标签。其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负数值，建议使用em作为设置单位  
10、word-break：自动换行，其中有normal、break-all、keep-all  
11、word-wrap：允许长单词或URL地址换行到下一行，其中有normal、break-word


### 盒子模型

所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。因此，可以说网页就是多个盒子嵌套排列的结果

![boxmodel](boxmodel.gif)
内边距出现在内容区域的周围，当给元素添加背景色或背景图像时，该元素的背景色或背景图像也将出现在内边距中。外边距是该元素与相邻元素之间的距离

盒子的总宽度 = width + 左右内边距之和 + 左右边框宽度之和  
盒子的总高度 = height + 上下边框宽度之和 + 上下边距之和  

> 注意：doctype是盒子模型的基础

```
// 内边距：padding属性用于设置内边距，复合属性
.box{
    /* 上 右 下 左 */
    padding:20px 5px 10px 5px;
    border:1px solid #09c;
    width:100px;
    height:100px;
}

// 外边距：margin属性用于设置外边距，复合属性。实际中经常对块元素应用宽度属性width，并将左右的外边距设置为auto，可以使块级元素水平居中
.header
{
    width:960px;
    margin:0px auto;
}

// 行内元素不要设置上下的padding和margin，因为上下padding和margin不会起作用，当然，左右padding和margin还是会起作用

// 当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则它们之间的垂直间距不是margin-botton和margin-top之和，而是取两者之中的较大者。这种现象就被称为相邻块元素垂直外边距的合并(也称为外边距塌陷)

// 当块级元素进行嵌套时，如果父盒子没有设置上边框和上内边距的话，子盒子的上外边距和父盒子的上外边距会进行合并。合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。如果希望外边距不合并，那么可以为父元素定义1像素的上边框或上内边距。这里以定义父元素的上边框为例，在父div元素的css样式中假如以下样式
···
![box1](box1.png)
![box2](box2.png)


### 浮动

> 标准流，实际上就是一个网页内标签元素正常排列的顺序的意思，比如块级元素会独占一行，行内元素会按照顺序依次从左向右，从上向下排列。按照这种大前提的布局排列之下绝对不会出现列外的情况叫做标准流布局，也称为流式布局

![flow](flow.png)
浮动的本质就是：解决图片和文字并排的格式问题。元素浮动后，会脱离标准流，但是还会影响标准流的布局

在css中，通过float属性来定义浮动，其基本语法格式如下：
```
// left、right、none(default)
// 元素向左浮动、向右浮动、不浮动
.box {
    float:left;
}
```

浮动特性：  
1、浮动脱离标准流，不占位置，但会影响标准流，且浮动只有左右浮动  
2、浮动的元素A排列位置，跟上一个元素(块级)有关系：如果上一个元素有浮动，则A元素顶部和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐  
3、一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动，这样才能一行对其显示  
4、浮动根据元素书写的位置来显示相应的浮动  
5、元素添加浮动之后，如果没有设置宽高的话，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少，也就具有了包裹性  
6、浮动具有破坏性，元素浮动后，破坏原来的正常流布局，造成内容塌陷(如果一个标准流中的合资所有的子元素都进行了浮动，而且盒子没有设置高度，那么父容器的整个高度会塌陷)

当盒子内的元素超出盒子自身的大小时，内容就会溢出(IE6除外)，这时如果想要规范溢出的显示方式，就需要使用css的overflow属性，其基本语法格式如下：  
```
// 溢出内容不裁剪呈现在元素框外、溢出内容裁剪不可见、自适应显示内容(需要时显示滚动条)、始终显示滚动条
overflow : visible(default)|hidden|auto|scroll
```

### 布局

为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：  
1、确定页面的版心(可视区)(版心是指网页中主体内容所在的区域，一般在浏览器窗口中水平居中显示)  
2、分析页面中的行模块，以及每个行模块中的列模块  
3、运用盒模型的原理，通过div+css布局来控制网页的各个模块

在css中，position属性用于定义元素的定位模式，其基本语法格式为：
```
// 自动定位、相对定位(相对于原文档流位置)、绝对定位(相对于上一个已经定位的父元素)、固定定位(相对于浏览器)
.position {
    position:static(default)|relative|absolute|fixed;
}
```
在css中，通过边偏移属性top,bottom,left或right，来经确定位元素的位置，其取值为不同单位的数值或百分比：
```

```



https://www.w3school.com.cn/css/css_boxmodel.asp
https://www.cnblogs.com/edisonchou/p/6039229.html








参考：  
[W3C School](https://www.w3school.com.cn/css/index.asp)  

