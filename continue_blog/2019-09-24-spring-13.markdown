---
layout:     post
title:      "Spring(十三) Environment"
date:       2018-09-24
author:     "ZhouJ000"
header-img: "img/in-post/2018/post-bg-2018-headbg.jpg"
catalog: true
tags:
    - spring
--- 

[Spring(一) IOC核心类](https://zhouj000.github.io/2018/08/19/spring-1/)  
[Spring(二) Resource定位与载入](https://zhouj000.github.io/2018/08/26/spring-2/)  
[Spring(三) BeanDefinition解析与注册](https://zhouj000.github.io/2018/08/27/spring-3/)  
[Spring(四) 自定义标签解析](https://zhouj000.github.io/2018/09/06/spring-4/)  
[Spring(五) 其他初始化步骤](https://zhouj000.github.io/2018/09/08/spring-5/)  
[Spring(六) bean的加载01](https://zhouj000.github.io/2018/09/11/spring-6/)  
[Spring(七) bean的加载02](https://zhouj000.github.io/2018/09/14/spring-7/)  
[Spring(八) SpringBean的生命周期](https://zhouj000.github.io/2018/09/15/spring-8/)  
[Spring(九) IOC时序图](https://zhouj000.github.io/2018/09/17/spring-9/)  
[Spring(十) AOP 01](https://zhouj000.github.io/2018/09/22/spring-10/)  
[Spring(十一) AOP 02](https://zhouj000.github.io/2018/09/23/spring-11/)  
[Spring(十二) spring事务](https://zhouj000.github.io/2018/09/24/spring-12/)  




# Environment

![environment](environment.png)
Environment接口是暴露出来当前运行环境的公开接口，从接口方法可以看出，主要实现功能分为两个关键部分，Properties属性和Profile环境配置文件

+ **PropertyResolver**：提供**属性访问**功能
+ **ConfigurablePropertyResolver**：继承自PropertyResolver，额外提供**属性类型转换**(基于org.springframework.core.convert.ConversionService)功能
+ **Environment**：继承自PropertyResolver，额外提供**访问和判断profiles**的功能
+ **ConfigurableEnvironment**：继承自ConfigurablePropertyResolver和Environment，并且提供**设置**激活的**profile**和默认的profile的功能
+ ConfigurableWebEnvironment：继承自ConfigurableEnvironment，并且提供**配置Servlet上下文和Servlet参数**的功能
+ AbstractEnvironment：实现了ConfigurableEnvironment接口，默认属性和存储容器的定义，并且实现了ConfigurableEnvironment中的方法，并且为子类预留可覆盖了扩展方法
+ StandardEnvironment：继承自AbstractEnvironment，**非Servlet(Web)环境下的标准Environment实现**
+ StandardServletEnvironment：继承自StandardEnvironment，**Servlet(Web)环境下的标准Environment实现**
+ Reactive相关接口


Environment的静态属性和存储容器都是在AbstractEnvironment中定义的：
```
private final MutablePropertySources propertySources = new MutablePropertySources();

// Environment的存储容器就是org.springframework.core.env.PropertySource的子类集合
public class MutablePropertySources implements PropertySources {
	private final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();
	// ...
}

public abstract class PropertySource<T> {
	protected final String name;
	protected final T source;
	public boolean equals(Object other) {
		return (this == other || (other instanceof PropertySource &&
				ObjectUtils.nullSafeEquals(this.name, ((PropertySource<?>) other).name)));
	}
	public int hashCode() {
		return ObjectUtils.nullSafeHashCode(this.name);
	}
	//...
}
```
从重写的equals和hashCode可以看出，一个PropertySource实例绑定到一个唯一的name，这个name有点像HashMap里面的key，这些说明只和name属性有关。PropertySource的最常用子类是：  
1、MapPropertySource：继承自EnumerablePropertySource，source指定为Map实例的PropertySource实现  
2、PropertiesPropertySource：继承自MapPropertySource，source指定为Map实例的PropertySource实现，内部的Map实例由Properties实例转换而来  
3、ResourcePropertySource：继承自PropertiesPropertySource，source指定为通过Resource实例转化为Properties再转换为Map实例  
4、StubPropertySource：PropertySource的一个内部类，source设置为null，实际上就是空实现  
5、ComparisonPropertySource：继承自StubPropertySource，所有属性访问方法强制抛出异常，作用就是一个不可访问属性的空实现

再回过头看MutablePropertySources，list创建的是一个CopyOnWriteArrayList，这是配置属性的底层存储数据结构，MutablePropertySources是PropertySources的一个子类，也提供了get、addFirst、addLast、addBefore、addAfter、remove、replace等便捷方法

然后来看AbstractEnvironment中的另一个属性：
```java
private final ConfigurablePropertyResolver propertyResolver =
			new PropertySourcesPropertyResolver(this.propertySources);
···
PropertySourcesPropertyResolver是ConfigurablePropertyResolver的实现，默认的profile就是字符串default





















http://throwable.coding.me/2018/12/16/spring-boot-environment-configuration-spread/#Environment%E7%B1%BB%E4%BD%93%E7%B3%BB
https://www.cnblogs.com/throwable/p/9411100.html



https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=spring%20Environment&rsv_pq=80a8eb6f000ff5c9&rsv_t=272dxzkV9pTXTWlrQ6SYPjN72Z%2BCkcOOEJfYU%2Bel3VExrS9dUwElXKElcxk&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=8&rsv_sug1=6&rsv_sug7=100&rsv_n=2&rsv_sug2=0&inputT=13493&rsv_sug4=13493








https://www.servercoder.com/archives/

















